sample_mean_CRC <- sum(bi_normal_CRC[i,1:100]) / 100
if(temp <= sample_mean_CRC){
for(j in 1:b){
if(normal_CRC[i,j] >= temp + sd(normal_CRC[i,])){
bi_normal_CRC[i,j] <- 1
}
else{
bi_normal_CRC[i,j] <- 0
}
}
}
else{
for(j in 1:b){
if(normal_CRC[i,j] <= temp - sd(normal_CRC[i,])){
bi_normal_CRC[i,j] <- 1
}
else{
bi_normal_CRC[i,j] <- 0
}
}
}
}
write.table(bi_normal_CRC, "~/LOBICO/data/short.random.forest.any/Bi-Normal-CRC.txt",
sep = "\t", row.names = T, col.names = T)
normal_CRC_class <- c(rep(1, times = 100), rep(0, times = 50))
write.table(normal_CRC_class, "~/LOBICO/data/short.random.forest.any/Normal-CRC-biclass.txt",
sep = "\t", row.names = F, col.names = F)
View(bi_normal_CRC)
## CRC Logic Model
LogicModel_CRC <- list(c(3,4,5), c(3,4,10))   # ~1 & 9 & ~10 | ~1 & 5
dat_CRC <- read.table('~/LOBICO/data/short.random.forest.any/Bi-Normal-CRC.txt')
class_CRC <- read.table('~/LOBICO/data/short.random.forest.any/Normal-CRC-biclass.txt')
model1_CRC <- dat_CRC[LogicModel_CRC[[1]],]
model2_CRC <- dat_CRC[LogicModel_CRC[[2]],]
results_CRC <- ((!model1_CRC[1,]) & (!model1_CRC[2,]) & (!model1_CRC[3,])) |
((model2_CRC[1,]) & (model2_CRC[2,]) & (!model2_CRC[3,]))
table_CRC <- table(results_CRC, t(class_CRC))
accuracy_CRC <- (table_CRC[1,1] + table_CRC[2,2])/nrow(class_CRC)
recall_CRC <- table_CRC[2,2] / (table_CRC[2,2] + table_CRC[1,2])
precision_CRC <- table_CRC[2,2] / (table_CRC[2,2] + table_CRC[2,1])
F1_CRC <- 2 * recall_CRC * precision_CRC / (recall_CRC + precision_CRC)
table_CRC
F1_CRC
accuracy_CRC
23/100
1/(23/50 + 0.5)
2 * (23/50 * 0.5) / (23/50 + 0.5)
source('~/LOBICO/data/short.random.forest.any/binarization.R', echo=TRUE)
source('~/LOBICO/data/short.random.forest.any/binarization.R', echo=TRUE)
normal_CRC_S1 <- read.table("~/LOBICO/data/short.random.forest.any/selected_feature_cpm_Normal-CRC_S1.txt",
sep = '\t', header = T, row.names = 1)
normal_CRC <- read.table("~/LOBICO/data/short.random.forest.any/selected_feature_cpm_Normal-CRC.txt",
sep = '\t', header = T, row.names = 1)
normal_PRAD <- read.table("~/LOBICO/data/short.random.forest.any/selected_feature_cpm_Normal-PRAD.txt",
sep = '\t', header = T, row.names = 1)
normal_PAAD <- read.table("~/LOBICO/data/short.random.forest.any/selected_feature_cpm_Normal-PAAD.txt",
sep = '\t', header = T, row.names = 1)
## Normal-CRC part
bi_normal_CRC <- normal_CRC
bi_normal_CRC <- as.data.frame(t(bi_normal_CRC))
bi_normal_CRC$names <- rownames(bi_normal_CRC)
bi_normal_CRC <- arrange(bi_normal_CRC, names)
rownames(bi_normal_CRC) <- bi_normal_CRC$names
bi_normal_CRC <- as.data.frame(t(bi_normal_CRC[,-11]))
a = nrow(bi_normal_CRC)
b = ncol(bi_normal_CRC)
library(dplyr)
bi_normal_CRC <- arrange(bi_normal_CRC, names)
library(dplyr)
normal_CRC_S1 <- read.table("~/LOBICO/data/short.random.forest.any/selected_feature_cpm_Normal-CRC_S1.txt",
sep = '\t', header = T, row.names = 1)
normal_CRC <- read.table("~/LOBICO/data/short.random.forest.any/selected_feature_cpm_Normal-CRC.txt",
sep = '\t', header = T, row.names = 1)
normal_PRAD <- read.table("~/LOBICO/data/short.random.forest.any/selected_feature_cpm_Normal-PRAD.txt",
sep = '\t', header = T, row.names = 1)
normal_PAAD <- read.table("~/LOBICO/data/short.random.forest.any/selected_feature_cpm_Normal-PAAD.txt",
sep = '\t', header = T, row.names = 1)
## Normal-CRC part
bi_normal_CRC <- normal_CRC
bi_normal_CRC <- as.data.frame(t(bi_normal_CRC))
bi_normal_CRC$names <- rownames(bi_normal_CRC)
bi_normal_CRC <- arrange(bi_normal_CRC, names)
rownames(bi_normal_CRC) <- bi_normal_CRC$names
bi_normal_CRC <- as.data.frame(t(bi_normal_CRC[,-11]))
a = nrow(bi_normal_CRC)
b = ncol(bi_normal_CRC)
for(i in 1:a){
temp <- sum(normal_CRC[i,])/b
sample_mean_CRC <- sum(bi_normal_CRC[i,1:100]) / 100
if(temp <= sample_mean_CRC){
for(j in 1:b){
if(normal_CRC[i,j] >= temp + sd(normal_CRC[i,])){
bi_normal_CRC[i,j] <- 1
}
else{
bi_normal_CRC[i,j] <- 0
}
}
}
else{
for(j in 1:b){
if(normal_CRC[i,j] <= temp - sd(normal_CRC[i,])){
bi_normal_CRC[i,j] <- 1
}
else{
bi_normal_CRC[i,j] <- 0
}
}
}
}
write.table(bi_normal_CRC, "~/LOBICO/data/short.random.forest.any/Bi-Normal-CRC.txt",
sep = "\t", row.names = T, col.names = T)
normal_CRC_class <- c(rep(1, times = 100), rep(0, times = 50))
write.table(normal_CRC_class, "~/LOBICO/data/short.random.forest.any/Normal-CRC-biclass.txt",
sep = "\t", row.names = F, col.names = F)
## Normal-CRC_S1 part
bi_normal_CRC_S1 <- normal_CRC_S1
bi_normal_CRC_S1 <- as.data.frame(t(bi_normal_CRC_S1))
bi_normal_CRC_S1$names <- rownames(bi_normal_CRC_S1)
bi_normal_CRC_S1 <- arrange(bi_normal_CRC_S1, names)
rownames(bi_normal_CRC_S1) <- bi_normal_CRC_S1$names
bi_normal_CRC_S1 <- as.data.frame(t(bi_normal_CRC_S1[,-11]))
a = nrow(bi_normal_CRC_S1)
b = ncol(bi_normal_CRC_S1)
for(i in 1:a){
temp <- sum(normal_CRC_S1[i,])/b
sample_mean_CRC_S1 <- sum(bi_normal_CRC_S1[i,1:100]) / 100
if(temp <= sample_mean_CRC_S1){
for(j in 1:b){
if(normal_CRC_S1[i,j] >= temp + sd(normal_CRC_S1[i,])){
bi_normal_CRC_S1[i,j] <- 1
}
else{
bi_normal_CRC_S1[i,j] <- 0
}
}
}
else{
for(j in 1:b){
if(normal_CRC_S1[i,j] <= temp - sd(normal_CRC_S1[i,])){
bi_normal_CRC_S1[i,j] <- 1
}
else{
bi_normal_CRC_S1[i,j] <- 0
}
}
}
}
View(normal_CRC_S1)
View(bi_normal_CRC_S1)
source('~/LOBICO/data/short.random.forest.any/binarization.R', echo=TRUE)
## Normal-CRC_S1 part
bi_normal_CRC_S1 <- normal_CRC_S1
bi_normal_CRC_S1 <- as.data.frame(t(bi_normal_CRC_S1))
bi_normal_CRC_S1$names <- rownames(bi_normal_CRC_S1)
bi_normal_CRC_S1 <- arrange(bi_normal_CRC_S1, names)
rownames(bi_normal_CRC_S1) <- bi_normal_CRC_S1$names
bi_normal_CRC_S1 <- as.data.frame(t(bi_normal_CRC_S1[,-11]))
a = nrow(bi_normal_CRC_S1)
b = ncol(bi_normal_CRC_S1)
for(i in 1:a){
temp <- sum(normal_CRC_S1[i,])/b
sample_mean_CRC_S1 <- sum(bi_normal_CRC_S1[i,1:25]) / 25
if(temp <= sample_mean_CRC_S1){
for(j in 1:b){
if(normal_CRC_S1[i,j] >= temp + sd(normal_CRC_S1[i,])){
bi_normal_CRC_S1[i,j] <- 1
}
else{
bi_normal_CRC_S1[i,j] <- 0
}
}
}
else{
for(j in 1:b){
if(normal_CRC_S1[i,j] <= temp - sd(normal_CRC_S1[i,])){
bi_normal_CRC_S1[i,j] <- 1
}
else{
bi_normal_CRC_S1[i,j] <- 0
}
}
}
}
write.table(bi_normal_CRC_S1, "~/LOBICO/data/short.random.forest.any/Bi-Normal-CRC_S1.txt",
sep = "\t", row.names = T, col.names = T)
normal_CRC_S1_class <- c(rep(1, times = 25), rep(0, times = 50))
write.table(normal_CRC_S1_class, "~/LOBICO/data/short.random.forest.any/Normal-CRC_S1-biclass.txt",
sep = "\t", row.names = F, col.names = F)
library(dplyr)
normal_CRC_S1 <- read.table("~/LOBICO/data/short.random.forest.any/selected_feature_cpm_Normal-CRC_S1.txt",
sep = '\t', header = T, row.names = 1)
normal_CRC <- read.table("~/LOBICO/data/short.random.forest.any/selected_feature_cpm_Normal-CRC.txt",
sep = '\t', header = T, row.names = 1)
normal_PRAD <- read.table("~/LOBICO/data/short.random.forest.any/selected_feature_cpm_Normal-PRAD.txt",
sep = '\t', header = T, row.names = 1)
normal_PAAD <- read.table("~/LOBICO/data/short.random.forest.any/selected_feature_cpm_Normal-PAAD.txt",
sep = '\t', header = T, row.names = 1)
## Normal-CRC part
bi_normal_CRC <- normal_CRC
bi_normal_CRC <- as.data.frame(t(bi_normal_CRC))
bi_normal_CRC$names <- rownames(bi_normal_CRC)
bi_normal_CRC <- arrange(bi_normal_CRC, names)
rownames(bi_normal_CRC) <- bi_normal_CRC$names
bi_normal_CRC <- as.data.frame(t(bi_normal_CRC[,-11]))
a = nrow(bi_normal_CRC)
b = ncol(bi_normal_CRC)
for(i in 1:a){
temp <- sum(normal_CRC[i,])/b
sample_mean_CRC <- sum(bi_normal_CRC[i,1:100]) / 100
if(temp <= sample_mean_CRC){
for(j in 1:b){
if(normal_CRC[i,j] >= temp + sd(normal_CRC[i,])){
bi_normal_CRC[i,j] <- 1
}
else{
bi_normal_CRC[i,j] <- 0
}
}
}
else{
for(j in 1:b){
if(normal_CRC[i,j] <= temp - sd(normal_CRC[i,])){
bi_normal_CRC[i,j] <- 1
}
else{
bi_normal_CRC[i,j] <- 0
}
}
}
}
write.table(bi_normal_CRC, "~/LOBICO/data/short.random.forest.any/Bi-Normal-CRC.txt",
sep = "\t", row.names = T, col.names = T)
normal_CRC_class <- c(rep(1, times = 100), rep(0, times = 50))
write.table(normal_CRC_class, "~/LOBICO/data/short.random.forest.any/Normal-CRC-biclass.txt",
sep = "\t", row.names = F, col.names = F)
## Normal-CRC_S1 part
bi_normal_CRC_S1 <- normal_CRC_S1
bi_normal_CRC_S1 <- as.data.frame(t(bi_normal_CRC_S1))
bi_normal_CRC_S1$names <- rownames(bi_normal_CRC_S1)
bi_normal_CRC_S1 <- arrange(bi_normal_CRC_S1, names)
rownames(bi_normal_CRC_S1) <- bi_normal_CRC_S1$names
bi_normal_CRC_S1 <- as.data.frame(t(bi_normal_CRC_S1[,-11]))
a = nrow(bi_normal_CRC_S1)
b = ncol(bi_normal_CRC_S1)
for(i in 1:a){
temp <- sum(normal_CRC_S1[i,])/b
sample_mean_CRC_S1 <- sum(bi_normal_CRC_S1[i,1:25]) / 25
if(temp <= sample_mean_CRC_S1){
for(j in 1:b){
if(normal_CRC_S1[i,j] >= temp + sd(normal_CRC_S1[i,])){
bi_normal_CRC_S1[i,j] <- 1
}
else{
bi_normal_CRC_S1[i,j] <- 0
}
}
}
else{
for(j in 1:b){
if(normal_CRC_S1[i,j] <= temp - sd(normal_CRC_S1[i,])){
bi_normal_CRC_S1[i,j] <- 1
}
else{
bi_normal_CRC_S1[i,j] <- 0
}
}
}
}
write.table(bi_normal_CRC_S1, "~/LOBICO/data/short.random.forest.any/Bi-Normal-CRC_S1.txt",
sep = "\t", row.names = T, col.names = T)
normal_CRC_S1_class <- c(rep(1, times = 25), rep(0, times = 50))
write.table(normal_CRC_S1_class, "~/LOBICO/data/short.random.forest.any/Normal-CRC_S1-biclass.txt",
sep = "\t", row.names = F, col.names = F)
#a = nrow(bi_normal_PAAD)
#b = ncol(bi_normal_PAAD)
#for(i in 1:a){
temp <- sum(normal_PAAD[i,])/b + sd(normal_PAAD[i,])
for(j in 1:b){
if(normal_PAAD[i,j] >= temp){
bi_normal_PAAD[i,j] <- 1
}
else{
bi_normal_PAAD[i,j] <- 0
}
}
}
source('~/LOBICO/data/short.random.forest.any/binarization.R', echo=TRUE)
source('~/LOBICO/data/short.random.forest.any/binarization.R', echo=TRUE)
source('~/LOBICO/data/short.random.forest.any/binarization.R', echo=TRUE)
source('~/LOBICO/data/short.random.forest.up/binarization.R', echo=TRUE)
## CRC S1 Logic Model
LogicModel_CRC_S1 <- list(c(2,5,10))      # ~x2  & ~x5  & ~x10
dat_CRC_S1 <- read.table('~/LOBICO/data/short.random.forest.any/Bi-Normal-CRC_S1.txt')
class_CRC_S1 <- read.table('~/LOBICO/data/short.random.forest.any/Normal-CRC_S1-biclass.txt')
model1_CRC_S1 <- dat_CRC_S1[LogicModel_CRC_S1[[1]],]
results_CRC_S1 <- (!model1_CRC_S1[1,]) & (!model1_CRC_S1[2,]) & (!model1_CRC_S1[3,])
table_CRC_S1 <- table(results_CRC_S1, t(class_CRC_S1))
accuracy_CRC_S1 <- (table_CRC_S1[1,1] + table_CRC_S1[2,2])/nrow(class_CRC_S1)
recall_CRC_S1 <- table_CRC_S1[2,2] / (table_CRC_S1[2,2] + table_CRC_S1[1,2])
precision_CRC_S1 <- table_CRC_S1[2,2] / (table_CRC_S1[2,2] + table_CRC_S1[2,1])
F1_CRC_S1 <- 2 * recall_CRC_S1 * precision_CRC_S1 / (recall_CRC_S1 + precision_CRC_S1)
table_CRC_S1
F1_CRC_S1
accuracy_CRC_S1
## CRC Logic Model
LogicModel_CRC <- list(c(3,4,5), c(3,4,10))   # ~x3  & ~x4  & ~x5   |  x3  & x4  & ~x10
dat_CRC <- read.table('~/LOBICO/data/short.random.forest.any/Bi-Normal-CRC.txt')
class_CRC <- read.table('~/LOBICO/data/short.random.forest.any/Normal-CRC-biclass.txt')
model1_CRC <- dat_CRC[LogicModel_CRC[[1]],]
model2_CRC <- dat_CRC[LogicModel_CRC[[2]],]
results_CRC <- ((!model1_CRC[1,]) & (!model1_CRC[2,]) & (!model1_CRC[3,])) |
((model2_CRC[1,]) & (model2_CRC[2,]) & (!model2_CRC[3,]))
table_CRC <- table(results_CRC, t(class_CRC))
accuracy_CRC <- (table_CRC[1,1] + table_CRC[2,2])/nrow(class_CRC)
recall_CRC <- table_CRC[2,2] / (table_CRC[2,2] + table_CRC[1,2])
precision_CRC <- table_CRC[2,2] / (table_CRC[2,2] + table_CRC[2,1])
F1_CRC <- 2 * recall_CRC * precision_CRC / (recall_CRC + precision_CRC)
F1_CRC
table_CRC
table_CRC_S1
## CRC S1 Logic Model
LogicModel_CRC_S1 <- list(c(4,8,9), c(2,6,8))      # x4  & ~x8  & ~x9   |  ~x2  & ~x6  & x8
dat_CRC_S1 <- read.table('~/LOBICO/data/short.random.forest.any/Bi-Normal-CRC_S1.txt')
class_CRC_S1 <- read.table('~/LOBICO/data/short.random.forest.any/Normal-CRC_S1-biclass.txt')
model1_CRC_S1 <- dat_CRC_S1[LogicModel_CRC_S1[[1]],]
model2_CRC_S1 <- dat_CRC_S1[LogicModel_CRC_S1[[2]],]
results_CRC_S1 <- ( (model1_CRC_S1[1,]) & (!model1_CRC_S1[2,]) & (!model1_CRC_S1[3,]) ) |
((!model2_CRC_S1[1,]) & (!model2_CRC_S1[2,]) & (model2_CRC_S1[3,]))
table_CRC_S1 <- table(results_CRC_S1, t(class_CRC_S1))
accuracy_CRC_S1 <- (table_CRC_S1[1,1] + table_CRC_S1[2,2])/nrow(class_CRC_S1)
recall_CRC_S1 <- table_CRC_S1[2,2] / (table_CRC_S1[2,2] + table_CRC_S1[1,2])
precision_CRC_S1 <- table_CRC_S1[2,2] / (table_CRC_S1[2,2] + table_CRC_S1[2,1])
F1_CRC_S1 <- 2 * recall_CRC_S1 * precision_CRC_S1 / (recall_CRC_S1 + precision_CRC_S1)
table_CRC_S1
model2_CRC_S1
model1_CRC_S1
model2_CRC_S1[3,]
!model1_CRC_S1[2,]
source('~/LOBICO/Model/short.random.forest.any/Model.R', echo=TRUE)
## Normal-CRC_S1 part
bi_normal_CRC_S1 <- normal_CRC_S1
normal_CRC_S1 <- read.table("~/LOBICO/data/short.random.forest.any/selected_feature_cpm_Normal-CRC_S1.txt",
sep = '\t', header = T, row.names = 1)
## Normal-CRC_S1 part
bi_normal_CRC_S1 <- normal_CRC_S1
View(bi_normal_CRC_S1)
heatmap(as.matrix(bi_normal_CRC_S1))
normal_CRC <- read.table("~/LOBICO/data/short.random.forest.any/selected_feature_cpm_Normal-CRC.txt",
sep = '\t', header = T, row.names = 1)
heatmap(as.matrix(normal_CRC))
View(dat_CRC)
View(normal_CRC)
source('~/LOBICO/Model/short.random.forest.any/Model.R', echo=TRUE)
source('~/LOBICO/Model/short.random.forest.any/Model.R', echo=TRUE)
## CRC Logic Model
LogicModel_CRC <- list(c(1, 2, 9), c(7,8))   # ~1 & ~2 & ~9 | ~7 & 8
dat_CRC <- read.table('~/LOBICO/data/short.random.forest.up/Bi-Normal-CRC.txt')
class_CRC <- read.table('~/LOBICO/data/short.random.forest.up/Normal-CRC-biclass.txt')
model1_CRC <- dat_CRC[LogicModel_CRC[[1]],]
model2_CRC <- dat_CRC[LogicModel_CRC[[2]],]
results_CRC <- ((!model1_CRC[1,]) & (!model1_CRC[2,]) & (!model1_CRC[3,])) |
((!model2_CRC[1,]) & model2_CRC[2,])
table_CRC <- table(results_CRC, t(class_CRC))
accuracy_CRC <- (table_CRC[1,1] + table_CRC[2,2])/nrow(class_CRC)
recall_CRC <- table_CRC[2,2] / (table_CRC[2,2] + table_CRC[1,2])
precision_CRC <- table_CRC[2,2] / (table_CRC[2,2] + table_CRC[2,1])
F1_CRC <- 2 * recall_CRC * precision_CRC / (recall_CRC + precision_CRC)
## CRC S1 Logic Model
LogicModel_CRC_S1 <- list(c(1,5,9), c(1,2,10))      # 1 & ~5 & 9 | ~1 & 2 & ~10
dat_CRC_S1 <- read.table('~/LOBICO/data/short.random.forest.up/Bi-Normal-CRC_S1.txt')
class_CRC_S1 <- read.table('~/LOBICO/data/short.random.forest.up/Normal-CRC_S1-biclass.txt')
model1_CRC_S1 <- dat_CRC_S1[LogicModel_CRC_S1[[1]],]
model2_CRC_S1 <- dat_CRC_S1[LogicModel_CRC_S1[[2]],]
results_CRC_S1 <- (model1_CRC_S1[1,] & (!model1_CRC_S1[2,]) & model1_CRC_S1[3,]) |
((!model2_CRC_S1[1,]) & (model2_CRC_S1[2,]) & (!model2_CRC_S1[3,]))
table_CRC_S1 <- table(results_CRC_S1, t(class_CRC_S1))
accuracy_CRC_S1 <- (table_CRC_S1[1,1] + table_CRC_S1[2,2])/nrow(class_CRC_S1)
recall_CRC_S1 <- table_CRC_S1[2,2] / (table_CRC_S1[2,2] + table_CRC_S1[1,2])
precision_CRC_S1 <- table_CRC_S1[2,2] / (table_CRC_S1[2,2] + table_CRC_S1[2,1])
F1_CRC_S1 <- 2 * recall_CRC_S1 * precision_CRC_S1 / (recall_CRC_S1 + precision_CRC_S1)
table_CRC_S1
source('~/LOBICO/Model/short.random.forest.up/Model.R', echo=TRUE)
source('~/LOBICO/Model/short.random.forest.up/Model.R', echo=TRUE)
source('~/LOBICO/Model/short.random.forest.any/Model.R', echo=TRUE)
source('~/LOBICO/Model/short.random.forest.any/Model.R', echo=TRUE)
## CRC Logic Model
LogicModel_CRC <- list(5,2)   # 5 | 2
dat_CRC <- read.table('~/LOBICO/data/long.random.forest.any/Bi-Normal-CRC.txt')
class_CRC <- read.table('~/LOBICO/data/long.random.forest.any/Normal-CRC-biclass.txt')
model1_CRC <- dat_CRC[LogicModel_CRC[[1]],]
model2_CRC <- dat_CRC[LogicModel_CRC[[2]],]
results_CRC <- (model1_CRC) | (model2_CRC)
table_CRC <- table(results_CRC, t(class_CRC))
accuracy_CRC <- (table_CRC[1,1] + table_CRC[2,2])/nrow(class_CRC)
recall_CRC <- table_CRC[2,2] / (table_CRC[2,2] + table_CRC[1,2])
precision_CRC <- table_CRC[2,2] / (table_CRC[2,2] + table_CRC[2,1])
## HCC Logic Model
LogicModel_HCC <- list(1,6)      # 1 | 6
dat_HCC <- read.table('~/LOBICO/data/long.random.forest.any/Bi-Normal-HCC.txt')
class_HCC <- read.table('~/LOBICO/data/long.random.forest.any/Normal-HCC-biclass.txt')
model1_HCC <- dat_HCC[LogicModel_HCC[[1]],]
model2_HCC <- dat_HCC[LogicModel_HCC[[2]],]
results_HCC <- model1_HCC | model2_HCC
table_HCC <- table(results_HCC, t(class_HCC))
accuracy_HCC <- (table_HCC[1,1] + table_HCC[2,2])/nrow(class_HCC)
recall_HCC <- table_HCC[2,2] / (table_HCC[2,2] + table_HCC[1,2])
precision_HCC <- table_HCC[2,2] / (table_HCC[2,2] + table_HCC[2,1])
source('~/LOBICO/Model/long.random.forest.any/Model.R', echo=TRUE)
source('~/LOBICO/data/long.random.forest.down/binarization.R', echo=TRUE)
source('~/LOBICO/Model/long.random.forest.down/Model.R', echo=TRUE)
library(dplyr)
library(ggplot2)
long.random.forest.any <- read.table("~/LOBICO/long.random.forest.any.ACCURACY.txt", header = T)
long.random.forest.down <- read.table("~/LOBICO/long.random.forest.down.ACCURACY.txt", header = T)
short.random.forest.any <- read.table("~/LOBICO/short.random.forest.any.ACCURACY.txt", header = T)
short.random.forest.up <- read.table("~/LOBICO/short.random.forest.up.ACCURACY.txt", header = T)
summary_data <- rbind(long.random.forest.any, long.random.forest.down, short.random.forest.any, short.random.forest.up )
View(summary_data)
names(summary_data) <- c("Accuracy", "F1_Score", "Precision", "Recall", "Type", "Model", "Method")
## PAAD Logic Model
LogicModel_PAAD <- list(1,9)      # 1 | 9
dat_PAAD <- read.table('~/LOBICO/data/long.random.forest.any/Bi-Normal-PAAD.txt')
class_PAAD <- read.table('~/LOBICO/data/long.random.forest.any/Normal-PAAD-biclass.txt')
model1_PAAD <- dat_PAAD[LogicModel_PAAD[[1]],]
model2_PAAD <- dat_PAAD[LogicModel_PAAD[[2]],]
results_PAAD <- model1_PAAD & model2_PAAD
table_PAAD <- table(results_PAAD, t(class_PAAD))
accuracy_PAAD <- (table_PAAD[1,1] + table_PAAD[2,2])/nrow(class_PAAD)
recall_PAAD <- table_PAAD[2,2] / (table_PAAD[2,2] + table_PAAD[1,2])
precision_PAAD <- table_PAAD[2,2] / (table_PAAD[2,2] + table_PAAD[2,1])
F1_PAAD <- 2 * recall_PAAD * precision_PAAD / (recall_PAAD + precision_PAAD)
table_PAAD
## PAAD Logic Model
LogicModel_PAAD <- list(1,9)      # 1 | 9
dat_PAAD <- read.table('~/LOBICO/data/long.random.forest.any/Bi-Normal-PAAD.txt')
class_PAAD <- read.table('~/LOBICO/data/long.random.forest.any/Normal-PAAD-biclass.txt')
model1_PAAD <- dat_PAAD[LogicModel_PAAD[[1]],]
model2_PAAD <- dat_PAAD[LogicModel_PAAD[[2]],]
results_PAAD <- model1_PAAD | model2_PAAD
table_PAAD <- table(results_PAAD, t(class_PAAD))
accuracy_PAAD <- (table_PAAD[1,1] + table_PAAD[2,2])/nrow(class_PAAD)
recall_PAAD <- table_PAAD[2,2] / (table_PAAD[2,2] + table_PAAD[1,2])
precision_PAAD <- table_PAAD[2,2] / (table_PAAD[2,2] + table_PAAD[2,1])
F1_PAAD <- 2 * recall_PAAD * precision_PAAD / (recall_PAAD + precision_PAAD)
table_PAAD
source('~/LOBICO/Model/long.random.forest.any/Model.R', echo=TRUE)
long.random.forest.any <- read.table("~/LOBICO/long.random.forest.any.ACCURACY.txt", header = T)
long.random.forest.down <- read.table("~/LOBICO/long.random.forest.down.ACCURACY.txt", header = T)
short.random.forest.any <- read.table("~/LOBICO/short.random.forest.any.ACCURACY.txt", header = T)
short.random.forest.up <- read.table("~/LOBICO/short.random.forest.up.ACCURACY.txt", header = T)
summary_data <- rbind(long.random.forest.any, long.random.forest.down, short.random.forest.any, short.random.forest.up )
names(summary_data) <- c("Accuracy", "F1_Score", "Precision", "Recall", "Type", "Model", "Method")
View(summary_data)
general_plot <- ggplot(data = summary_data, aes(x = Type, y = F1_Score, fill = Method)) +
geom_col( position="dodge") +
coord_flip() + scale_fill_brewer(palette="Set2") +
theme(panel.grid.major =element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),axis.line = element_line(colour = "black"))
general_plot
scirep_data <- summary_data[which(summary_data$Method == "short.random.forest.up" |
summary_data$Method == "short.random.forest.any" ),]
scirep_plot <- ggplot(data = scirep_data, aes(x = Type, y = F1_Score, fill = Method)) +
geom_col( width = 0.75,
position=position_dodge(0.9)) +
coord_flip() + scale_fill_brewer(palette="Set2") +
theme(panel.grid.major =element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),axis.line = element_line(colour = "black")) +
theme(legend.position="top",
legend.direction = "vertical") +
guides(fill = guide_legend(reverse=TRUE))
scirep_plot
exbro_data <- summary_data[which(summary_data$Type == "HCC" |
summary_data$Type == "PAAD"),]
exbro_plot <- ggplot(data = exbro_data, aes(x = Type, y = F1_Score, fill = Method)) +
geom_col( width = 0.75,
position=position_dodge(0.9)) +
coord_flip() + scale_fill_brewer(palette="Set1") +
theme(panel.grid.major =element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),axis.line = element_line(colour = "black")) +
theme(legend.position="top",
legend.direction = "vertical")
exbro_plot
## CRC Logic Model
LogicModel_CRC <- list(c(1, 2, 9), c(2,3,6))   # ~1 & ~2 & ~9 | 2 & 3 & 6
dat_CRC <- read.table('~/LOBICO/data/short.random.forest.up/Bi-Normal-CRC.txt')
class_CRC <- read.table('~/LOBICO/data/short.random.forest.up/Normal-CRC-biclass.txt')
model1_CRC <- dat_CRC[LogicModel_CRC[[1]],]
model2_CRC <- dat_CRC[LogicModel_CRC[[2]],]
results_CRC <- ((!model1_CRC[1,]) & (!model1_CRC[2,]) & (!model1_CRC[3,])) |
((model2_CRC[1,]) & model2_CRC[2,] & model2_CRC[3,])
table_CRC <- table(results_CRC, t(class_CRC))
accuracy_CRC <- (table_CRC[1,1] + table_CRC[2,2])/nrow(class_CRC)
recall_CRC <- table_CRC[2,2] / (table_CRC[2,2] + table_CRC[1,2])
precision_CRC <- table_CRC[2,2] / (table_CRC[2,2] + table_CRC[2,1])
F1_CRC <- 2 * recall_CRC * precision_CRC / (recall_CRC + precision_CRC)
## CRC Logic Model
LogicModel_CRC <- list(c(1, 2, 9), c(7,8))   # ~1 & ~2 & ~9 | ~7 & 8
dat_CRC <- read.table('~/LOBICO/data/short.random.forest.up/Bi-Normal-CRC.txt')
class_CRC <- read.table('~/LOBICO/data/short.random.forest.up/Normal-CRC-biclass.txt')
model1_CRC <- dat_CRC[LogicModel_CRC[[1]],]
model2_CRC <- dat_CRC[LogicModel_CRC[[2]],]
results_CRC <- ((!model1_CRC[1,]) & (!model1_CRC[2,]) & (!model1_CRC[3,])) |
((!model2_CRC[1,]) & model2_CRC[2,])
table_CRC <- table(results_CRC, t(class_CRC))
accuracy_CRC <- (table_CRC[1,1] + table_CRC[2,2])/nrow(class_CRC)
recall_CRC <- table_CRC[2,2] / (table_CRC[2,2] + table_CRC[1,2])
precision_CRC <- table_CRC[2,2] / (table_CRC[2,2] + table_CRC[2,1])
F1_CRC <- 2 * recall_CRC * precision_CRC / (recall_CRC + precision_CRC)
source('~/LOBICO/data/long.random.forest.any/binarization.R', echo=TRUE)
source('~/LOBICO/data/short.random.forest.any/binarization.R', echo=TRUE)
source('~/LOBICO/data/short.random.forest.up/binarization.R', echo=TRUE)
